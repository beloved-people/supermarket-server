<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pers.wangshun.supermarketserver.mapper.PurchaseAccountingEntryDetailsMapper">
  <resultMap id="BaseResultMap" type="pers.wangshun.supermarketserver.model.PurchaseAccountingEntryDetails">
    <id column="purchase_accounting_entry_details_id" jdbcType="BIGINT" property="purchaseAccountingEntryDetailsId" />
    <result column="lending_sign" jdbcType="CHAR" property="lendingSign" />
    <result column="accounting_subjects" jdbcType="VARCHAR" property="accountingSubjects" />
    <result column="incurred_amount" jdbcType="DECIMAL" property="incurredAmount" />
    <result column="borrowing_balance" jdbcType="DECIMAL" property="borrowingBalance" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    purchase_accounting_entry_details_id, lending_sign, accounting_subjects, incurred_amount, 
    borrowing_balance
  </sql>
  <select id="selectByExample" parameterType="pers.wangshun.supermarketserver.model.PurchaseAccountingEntryDetailsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from management_sys.purchase_accounting_entry_details
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from management_sys.purchase_accounting_entry_details
    where purchase_accounting_entry_details_id = #{purchaseAccountingEntryDetailsId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from management_sys.purchase_accounting_entry_details
    where purchase_accounting_entry_details_id = #{purchaseAccountingEntryDetailsId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="pers.wangshun.supermarketserver.model.PurchaseAccountingEntryDetails">
    insert into management_sys.purchase_accounting_entry_details (purchase_accounting_entry_details_id, lending_sign,
      accounting_subjects, incurred_amount, borrowing_balance
      )
    values (#{purchaseAccountingEntryDetailsId,jdbcType=BIGINT}, #{lendingSign,jdbcType=CHAR}, 
      #{accountingSubjects,jdbcType=VARCHAR}, #{incurredAmount,jdbcType=DECIMAL}, #{borrowingBalance,jdbcType=DECIMAL}
      )
  </insert>
  <insert id="insertSelective" parameterType="pers.wangshun.supermarketserver.model.PurchaseAccountingEntryDetails">
    insert into management_sys.purchase_accounting_entry_details
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="purchaseAccountingEntryDetailsId != null">
        purchase_accounting_entry_details_id,
      </if>
      <if test="lendingSign != null">
        lending_sign,
      </if>
      <if test="accountingSubjects != null">
        accounting_subjects,
      </if>
      <if test="incurredAmount != null">
        incurred_amount,
      </if>
      <if test="borrowingBalance != null">
        borrowing_balance,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="purchaseAccountingEntryDetailsId != null">
        #{purchaseAccountingEntryDetailsId,jdbcType=BIGINT},
      </if>
      <if test="lendingSign != null">
        #{lendingSign,jdbcType=CHAR},
      </if>
      <if test="accountingSubjects != null">
        #{accountingSubjects,jdbcType=VARCHAR},
      </if>
      <if test="incurredAmount != null">
        #{incurredAmount,jdbcType=DECIMAL},
      </if>
      <if test="borrowingBalance != null">
        #{borrowingBalance,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="pers.wangshun.supermarketserver.model.PurchaseAccountingEntryDetails">
    update management_sys.purchase_accounting_entry_details
    <set>
      <if test="lendingSign != null">
        lending_sign = #{lendingSign,jdbcType=CHAR},
      </if>
      <if test="accountingSubjects != null">
        accounting_subjects = #{accountingSubjects,jdbcType=VARCHAR},
      </if>
      <if test="incurredAmount != null">
        incurred_amount = #{incurredAmount,jdbcType=DECIMAL},
      </if>
      <if test="borrowingBalance != null">
        borrowing_balance = #{borrowingBalance,jdbcType=DECIMAL},
      </if>
    </set>
    where purchase_accounting_entry_details_id = #{purchaseAccountingEntryDetailsId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="pers.wangshun.supermarketserver.model.PurchaseAccountingEntryDetails">
    update management_sys.purchase_accounting_entry_details
    set lending_sign = #{lendingSign,jdbcType=CHAR},
      accounting_subjects = #{accountingSubjects,jdbcType=VARCHAR},
      incurred_amount = #{incurredAmount,jdbcType=DECIMAL},
      borrowing_balance = #{borrowingBalance,jdbcType=DECIMAL}
    where purchase_accounting_entry_details_id = #{purchaseAccountingEntryDetailsId,jdbcType=BIGINT}
  </update>
</mapper>